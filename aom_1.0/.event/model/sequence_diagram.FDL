/* Optional style and theme specification files to style the output. Choose from predefined files:
aqua.FDL, business.FDL, chocolate.FDL, pastel.FDL, rainbow.FDL or sunrise.FDL.*/
#include <pastel.FDL>  

/* Project include file - Use include files to share common aspects of the model across multiple FDL files. 
                         Open with Ctrl+P and file name. */
#include <inc.FDL>

/* We start with defining the architecture. You may define as five tier architecture
as demonstrated in this example. If your are modeling a less complex system,
you may choose a 4, 3, 2 or 1 tier architecture. */

/* Tier 5: System declaration - Hemispheres */
system: "Northern Hemisphere", "Southern Hemisphere"

/* Tier 4: Subsystem declaration - Continents */
subsystem: "North America" in "Northern Hemisphere", Asia in "Northern Hemisphere"
subsystem: Africa in "Southern Hemisphere"

/* Tier 3: Module declaration - Countries */
module : "United States" in "North America", Canada in "North America"
module : "South Africa" in Africa
module : India in Asia

/* Tier 2: Components are contained within modules - Provinces/States within countries. */
component : California in "United States", Nevada in "United States"
component : Ontario in Canada, Rajasthan in India
component : Gauteng in "South Africa"

/* Tier 1: eternal and dynamic objects
   Eternal objects are contained in components - Cities */
eternal : "Los Angeles" in California
eternal: separator in California             /* separator declaration just creates an empty space between LA and SF. */
eternal: "San Francisco" in California
eternal : "Las Vegas": DesertCity in Nevada  /* Note that DesertCity type has been assigned to Las Vegas */
eternal : Jaipur: DesertCity in Rajasthan    /* Jaipur is also assigned the DesertCity type */

/* Note: You can generate interface sequence diagrams for "Las Vegas" and Jaipur.
   If you generate an interface sequence diagram for a DesertCity, the diagram generated
   will contain all interfaces of "Las Vegas" as well as Jaipur. */

eternal : Johannesburg in Gauteng

/* Dynamic objects - Using dynamic to share a single axis between two entities
                     You may use dynamic to model objects that are created
                     and destroyed during the execution of a feature */
dynamic : Toronto | Ottawa in Ontario

/* Define the feature and message interactions in feature block.

MyTheme specifies the default styling parameters. MyTheme is defined in the inc.FDL file. */

{MyTheme} feature "FDL Tutorial" {

/* The ifdef conditions in this document shows how a single FDL file can be used to define multiple
scenarios by using #ifdef and #ifndef. The defines may be specified for individual documents
and scenarios in the project.scn.json file.

In this project advanced sections are included only if the ADVANCED flag is enabled in a scenario.
Refer to the project.scn.json file for the definition of basic and advanced tutorial scenarios.
*/

#ifdef ADVANCED
   heading "FDL Advanced Tutorial"
#else
   heading "FDL Basics Tutorial"
#endif

   /* Block remarks are displayed in a block that spawns across the full sequence diagram.
   Use this to summarize a feature or a sequence. */

|= A block remark is shown across the full sequence diagram. 
   A block remark may be shown across multiple lines. =|
    
   /* Use sequence blocks to group together interactions. Sequences may be nested.
      A PDF level bookmark and an enclosing box is used to represent a sequence. */

   sequence "Messages" {

     /* FDL supports statements and their attached remarks. The remarks are included only if the
     the FDL statement preceding it is included in the diagram. 
     
     A remark may be single line (Starts with % and ends at the end of the current line) or
     Multi-line (Enclosed in |* and *|) */
     
      Message (attribute="Value", field): "Los Angeles" -> "Las Vegas"
      % Message Statement: Model messages interactions with parameters.

      MessageResponse : "Los Angeles" <- "Las Vegas"
      % Message Statement: Model messages interactions (no parameters specified in this case). 

 #ifdef ADVANCED     
      "Self Message" : "Las Vegas" -> "Las Vegas"
      % Model messages to self. 
          
      "Message with Bold Arrow" : "Los Angeles" => Jaipur
      % Use the => or <= to represent messages with bold arrows. 

      "Bidirectional Interaction" : "Los Angeles" <-> Jaipur
      % Model bi-directional message interactions with <-> or <=>. 
   
      "Tagged Message" : "San Francisco"-"94123" -> "Los Angeles"-"90210"
      % Tag the source and/or the destination of a message to identify the entity interacting at the source/destination. 

     "Multi Line Message" + "- Sub header 1" + "- Sub header 2" (par1, par2) :"Las Vegas" -> Johannesburg
     % Represent compound messages with the multi-line message syntax.

     "Lost Message" : "Los Angeles" ->X Jaipur
     % Model a lost message.
#endif
   }

#ifdef ADVANCED
   sequence "Message interactions with the environment" {
       "Message from the Left Environment": env_l -> "San Francisco"
       % Represent a message from an external entity (shown on the left).

       "Message from the Right Environment": "Las Vegas" <- env_r
       % External interaction from an external entity (shown on the right side).
    }

   sequence "Compound Messages" {
      /* Message interactions that involve multiple senders and receivers are
      represented with Compound Messages. */
      chain {
        "Chain Message 1" (field1, field2): "Los Angeles" -> "San Francisco"
        "Chain Message 2" (attribute1=Value1, attribute2=Value2): "San Francisco" -> Jaipur
       }
      |* Represent a chain of message interactions in a single line. 
      Separate message names and parameters may be specified for each message interaction. *|

      "Message Cascade" (param1, param2="Value"): "Los Angeles" ->  "San Francisco" -> "Las Vegas" -> Jaipur
      % Represent a chain of message interactions involving forwarding of the same message. One set of message name and parameters may be specified. 
      
      "Bidirectional Interaction Cascade" : "Los Angeles" <->  "San Francisco" <-> "Las Vegas" <-> Jaipur
      % Cascades work for bidirectional interactions as well. 
   }

   sequence "Multicasts" {
      /* Represent a single message transmission that can be received at multiple nodes. */
      "Los Angeles" multicasts "Academy Awards (Oscars)" (BestActor, BestActress, BestMovie) to "San Francisco", "Las Vegas", Johannesburg, Jaipur
      % Model multicasts using this statement. The multicast sources is shown with a circle. 
      
      "San Francisco" multicasts "The Steve Jobs Show" ("One more thing...") to "Los Angeles",  "Las Vegas", Johannesburg, Jaipur
      % Another multicast. This time the multicast source is not at the edge. 
   }
#endif

   sequence "Loops" {
      /* Represents loops in a flow using the loop block. Loops may be nested. */
      loop "Outer loop condition" {
         loop "Inner loop condition" {
            "Repeated Message": "Los Angeles" -> "Las Vegas"
            "Los Angeles" action "Count the message"
         }
      }
   }

   sequence "Object Interactions" {
   /* Model object interactions with method call and return. Method calls may be nested. */
   "Los Angeles" invokes "San Francisco".TakeAction(actionId)
      % Model method invocation and return. 
      "San Francisco" invokes Jaipur.TakeAnotherAction(actionId)

      Jaipur.TakeAnotherAction returns
   "San Francisco".TakeAction returns
   }
   
   sequence "Object Creation and Deletion" {
      /* Manage creation and deletion of dynamic objects. */
      "Los Angeles" creates Ottawa(param1 = "Good Bye", param2, param3 = Value)
      % One object creates another. 
      
      "Los Angeles" deletes Ottawa
      % One object deletes another. 
      
      create Toronto
   |* Create object without specifying the creator. Use in sharing the same axis 
   spot between multiple entries. *|
        
      delete Toronto
      % Delete the object. The axis may be reused by another object. 
   }

   sequence "Timer Management" {
      "San Francisco" starts SingleShotTimer
      % Represent a timer start. 
      
      timeout SingleShotTimer
      % Represent a timeout. 

 #ifdef ADVANCED    
      "San Francisco" starts periodic PeriodicTimer
      % Start a periodic timer. 
      
      timeout PeriodicTimer
      % Timeout for a periodic timer. The timer stays active even after a timeout. 
      
      "San Francisco" stops PeriodicTimer
      % Model a timer stop. Works for periodic as well a single shot timers. 
      
      ...
      % Represent the passage of time with a dotted axis.
#endif 
   }

   separator        /* A separator just creates additional space between two sets of statements. */
   /* pagebreak */  /* You also force page breaks. Just un-comment the pagebreak statement preceding this comment. */
   
   issue "Why is 42 the answer to the ultimate question of life the universe and everything?"
   /* Use issue statements to flag any design issues. All the issues raised here will be listed as warnings. */

   sequence "Actions" {
      "Los Angeles" action "Host Academy Awards"
      % Model actions taken by an object. 
      
      "Los Angeles", "San Francisco" action "Joint Bid for Olympics"
      % Model joint actions taken by multiple objects. 

#ifdef ADVANCED    
      California action "Discuss Budget"
      |* Model actions at component level. *|
      
      "United States" action "Celebrate Independence Day"
      % A module level action. It this case, all entities within USA are included. 
      
      "United States", India action "Sign Bilateral Agreement"
      % Action involving multiple modules. 
#endif
    }

#ifdef ADVANCED       
   sequence "Compound Actions" {
      "Los Angeles", "San Francisco" begin action "Start Olympics Preparation"
      % Model an action start. 
      
      "Los Angeles", "San Francisco" end action "Start Olympics Preparation"
      % Model an action end. 
   }

   sequence "Resource Management" {      
      "Las Vegas" allocates "CES Convention Center"
      % Model resource allocation. 
      
      "Las Vegas" frees "CES Convention Center"
      % Free the resource. EventStudio will warn you if a allocated resource is not freed. 
      
      "Los Angeles", "San Francisco" allocate "Track and Field Stadium"
      % A joint resource allocation. 
      
      "Los Angeles", "San Francisco" free "Track and Field Stadium"
      % A joint resource free.
   }
#endif
   sequence "State Transitions" {  
      "Las Vegas" state = "Awaiting CES"
      % Change the state of an object. 
      
      "Los Angeles", "San Francisco" state = "Awaiting Olympics"
      % Change the joint state of two objects. 
#ifdef ADVANCED     
      "United States" state = "Celebrating Independence Day"
      % State specified at module level. The state transition will be included in module level and component level diagrams as well. 
#endif
   }
#ifdef ADVANCED
   sequence "Hyperlinks (PDF only)" {
      [_hyperlink] "Los Angeles", "San Francisco" action "Olympics Opening Ceremony" <http://www.olympic.org/>
      % Click on action box to visit the Olympics website. A different style has been applied with the style prefix [_hyperlink]. 
      
      [_hyperlink] "SCTP Datagram" : "San Francisco" -> "Las Vegas" <http://en.wikipedia.org/wiki/Stream_Control_Transmission_Protocol>
      % Click on the message name to get details about the message. [_hyperlink] style prefix has also been applied. 
    }

/* Define macros to specify commonly occurring patterns. The following example illustrates the 
definition a macro. Here the macro has been split into multiple lines. A few items to note here are:
- Newlines in regular FDL code have been replaced with semicolons (;)
- Just like C preprocessor macros, a backslash (\) is used to escape the newlines in the macro definition
- This macro sends with a closing curly brace that is not following by a ; or \
*/

#define REQUEST_RESPONSE(_msg, _src, _dst)   sequence "_msg Request and Response Handshake" {;\
                                             "_msg Request": "_src" -> "_dst";\
                                             |*_msg Request sent from _src to _dst.*|;\
                                             "_src" state = "Await _msg Response";\
                                             |* _src awaits _msg Response. *|;\
                                             "_dst" action "Invoke the message handler for '_msg Request'";\
                                             |* Invoke the message handler _msg Request. *|;\
                                             "_msg Response": "_src" <- "_dst";\
                                             |* Acknowledge message. *|;\
                                            }

   sequence "Preprocessor Macros" {
      |= The following content has been generated from a single macro:
      
      REQUEST_RESPONSE(Test, Los Angeles, Johannesburg)  =|
      REQUEST_RESPONSE(Test, Los Angeles, Johannesburg)
    }
#endif
}